package com.True.Care.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import org.springframework.http.HttpStatus;
import org.springframework.dao.DataIntegrityViolationException;

import com.True.Care.modal.User;
import com.True.Care.repository.UserRepository;

@Controller // <-- Use this if you want JSON responses by default
@RequestMapping(path = "/") // This means URL's start with /demo (after Application pat)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @PostMapping(path = "/register", consumes = "application/json")
    public ResponseEntity<String> addNewUser(@RequestBody User user) {
        try {
            userRepository.save(user);
            return ResponseEntity.ok("Saved");
        } catch (DataIntegrityViolationException e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Error: Email already exists.");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error: Something went wrong.");
        }
    }

    @GetMapping(path = "/users")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @PostMapping(path = "/login", consumes = "application/json")
    public ResponseEntity<?> loginUser(@RequestBody User loginRequest) {
        User user = userRepository.findByEmail(loginRequest.getEmail());
    
        if (user == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("User not found with email: " + loginRequest.getEmail());
        } else if (user.getPassword().equals(loginRequest.getPassword())) {
            return ResponseEntity.ok(true); // or you can return user data
        } else {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(false);
        }
    }
    
    
}
